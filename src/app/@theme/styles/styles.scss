/**
 * importer.less
 *
 * By default, new Sails projects are configured to compile this file
 * from LESS to CSS.  Unlike CSS files, LESS files are not compiled and
 * included automatically unless they are imported below.
 *
 * The LESS files imported below are compiled and included in the order
 * they are listed.  Mixins, variables, etc. should be imported first
 * so that they can be accessed by subsequent LESS stylesheets.
 *
 * (Just like the rest of the asset pipeline bundled in Sails, you can
 * always omit, customize, or replace this behavior with SASS, SCSS,
 * or any other Grunt tasks you like.)
 */

// material
@import "~@angular/material/prebuilt-themes/indigo-pink.css";

@import './my-variables';
@import './custom-bootstrap';

@import './template/wrapper';
@import './template/header';
@import './template/footer';
@import './template/steps';
@import './template/wallet';

@import './home/home';
@import './home/ticker-style';

@import './new-account/account-new';
@import './login/login';

@import './ico/ico';
@import './ico/ico_history';

@import './exchange/exchange';

@import './wallet/wallet-index';
@import './wallet/wallet-issuer';
@import './wallet/wallet-new';
@import './wallet/wallet-restore';
@import './wallet/wallet-settings';
@import './wallet/wallet-transaction';
@import './wallet/merchant';
@import './wallet/my-exchange/my-exchange';
@import './wallet/wallet-advance';
@import './wallet/wallet-multisign';

@import './admin/admin-email';
@import './admin/admin-ico';
@import './admin/backup-db';
@import './admin/index';
@import './components/image-err';



img {
  max-width: 100%
}

a{
  cursor: pointer;
}

.error.alert-danger {
  margin-top: 15px;
}

.alert {
  padding-left: 15px;
  padding-top: 8px;
  padding-bottom: 8px;
}
.modal-backdrop{
  display: none !important;
}
.modal {
  background: rgba(0,0,0,0.5);
}

@mixin can-toggle-branding($can-toggle-off-color: #777,
$can-toggle-on-color: #5fc054,
$can-toggle-inactive-text: rgba(white, 0.5),
$can-toggle-transition: cubic-bezier(0, 1, 0.5, 1)) {

  input[type="checkbox"] {

    &[disabled]~label {
      color: rgba($can-toggle-off-color, 0.5);
    }

    &:focus~label,
    &:hover~label {
      .can-toggle__switch {
        background-color: $can-toggle-off-color;

        &:after {
          color: darken($can-toggle-off-color, 10%);
        }
      }
    }

    &:hover~label {
      color: darken($can-toggle-off-color, 5%);
    }

    &:checked {
      ~label {
        &:hover {
          color: darken($can-toggle-on-color, 3%);
        }

        .can-toggle__switch {
          background-color: lighten($can-toggle-on-color, 5%);

          &:after {
            color: darken($can-toggle-on-color, 5%);
          }
        }
      }

      &:focus,
      &:hover {
        ~label {
          .can-toggle__switch {
            background-color: $can-toggle-on-color;

            &:after {
              color: darken($can-toggle-on-color, 10%);
            }
          }
        }
      }
    }
  }

  label {

    .can-toggle__label-text {
      flex: 1;
    }

    .can-toggle__switch {
      transition: background-color 0.3s $can-toggle-transition;
      background: #ac2925;
      border-color: #761c19;

      &:before {
        color: $can-toggle-inactive-text;
      }

      &:after {
        // Autoprefixer choked here, so making the prefixes explicit
        -webkit-transition: -webkit-transform 0.3s $can-toggle-transition;
        transition: transform 0.3s $can-toggle-transition;
        color: $can-toggle-off-color;
      }
    }

  }
}

@mixin can-toggle-appearance ($can-toggle-width: 134px,
$can-toggle-height: 36px,
$can-toggle-border-radius: 4px,
$can-toggle-offset: 2px,
$can-toggle-label-font-size: 14px,
$can-toggle-switch-font-size: 12px,
$can-toggle-shadow: 0 3px 3px rgba(black, 0.4)) {
  $can-toggle-switch-width: $can-toggle-width/2;

  input[type="checkbox"] {

    &:focus~label,
    &:hover~label {
      .can-toggle__switch {
        &:after {
          box-shadow: $can-toggle-shadow;
        }
      }
    }

    &:checked {
      ~label {
        .can-toggle__switch {
          &:after {
            transform: translate3d($can-toggle-width - ($can-toggle-switch-width + $can-toggle-offset), 0, 0);
          }
        }
      }

      &:focus,
      &:hover {
        ~label {
          .can-toggle__switch {
            &:after {
              box-shadow: $can-toggle-shadow;
            }
          }
        }
      }
    }
  }

  label {
    font-size: $can-toggle-label-font-size;

    .can-toggle__switch {
      height: $can-toggle-height;
      flex: 0 0 $can-toggle-width;
      border-radius: $can-toggle-border-radius;

      &:before {
        left: $can-toggle-width/2;
        font-size: $can-toggle-switch-font-size;
        line-height: $can-toggle-height;
        width: $can-toggle-width/2;
        padding: 0 12px;
      }

      &:after {
        top: $can-toggle-offset;
        left: $can-toggle-offset;
        border-radius: $can-toggle-border-radius/2;
        width: $can-toggle-switch-width - $can-toggle-offset;
        line-height: $can-toggle-height - ($can-toggle-offset*2);
        font-size: $can-toggle-switch-font-size;
      }

      &:hover {
        &:after {
          box-shadow: $can-toggle-shadow;
        }
      }
    }
  }
}



.can-toggle {
  position: relative;

  *,
  *:before,
  *:after {
    box-sizing: border-box;
  }

  //overflow: hidden;

  input[type="checkbox"] {
    opacity: 0;
    position: absolute;
    top: 0;
    left: 0;

    &[disabled]~label {
      pointer-events: none;

      .can-toggle__switch {
        opacity: 0.4;
      }
    }

    &:checked {
      ~label {

        .can-toggle__switch {

          &:before {
            content: attr(data-unchecked);
            left: 0;
          }

          &:after {
            content: attr(data-checked);
          }
        }
      }

      &:focus,
      &:hover {
        ~label {}
      }
    }
  }

  label {
    user-select: none;
    position: relative;
    display: flex;
    align-items: center;

    .can-toggle__label-text {
      flex: 1;
      padding-left: 32px;
    }

    .can-toggle__switch {
      position: relative;

      &:before {
        content: attr(data-checked);
        position: absolute;
        top: 0;
        text-transform: uppercase;
        text-align: center;
      }

      &:after {
        content: attr(data-unchecked);
        position: absolute;
        z-index: 5;
        text-transform: uppercase;
        text-align: center;
        background: white;
        transform: translate3d(0, 0, 0);
      }

    }

  }

  // Default values for .can-toggle class
  @include can-toggle-appearance;

  // Or re-brand the toggle for different applications
  &.demo-rebrand-1 {
    width: 135px;
    @include can-toggle-branding (#b53e74, // Off state color
    #3d9c72, // On state color
    rgba(white, 0.6), // Off state text color
    ease-in-out // Transition timing function
    );
  }
}


// swal2 set option awllet dialog
body.swal2-height-auto.swal2-shown{
  height: 100% !important;
}
#swal2-content{
  font-size: 15px;
}
.swal2-popup{
  width: auto !important;
  min-width: 32em;
  max-width: 320px !important;
}
.swal2-popup .swal2-title{
  word-break: break-word;
}

//  Material
.mat-slider-display-thumblabel{
  width: 100%;
  .mat-slider-thumb-label {
    transform: rotate(45deg) !important;
    border-radius: 50% 50% 0 !important;
  }

  .mat-slider-thumb {
    transform: scale(0) !important;
  }

  .mat-slider-thumb-label-text {
    opacity: 1 !important;
  }
}
.mat-slider-orange{
  width: 100%;
  .mat-slider-thumb-label {
    background-color: rgb(255,87,34) !important;
  }
  .mat-slider-track-fill{
    background-color: rgb(255,87,34) !important;
  }
}
.mat-slider-green{
  width: 100%;
  .mat-slider-thumb-label {
    background-color: rgb(76,175,80) !important;
  }
  .mat-slider-track-fill{
    background-color: rgb(76,175,80) !important;
  }
}
.mat-slider-min-value.mat-slider-thumb-label-showing .mat-slider-thumb-label{
  background-color: rgb(189,189,189) !important;
}
.mat-slider-disabled .mat-slider-track-fill{
  background-color: rgba(0,0,0,.26) !important;
}

// TOASTR
.toastr-info{
  text-decoration: underline;
  font-weight: 600;
}
